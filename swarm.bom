brooklyn.catalog:
  version: "2.0.0-SNAPSHOT" # CONTAINER_SERVICE_VERSION
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/471fa6e4cb58062ccbf91afc111980f9c7004981/swarm/logo.png

  publish:
    description: |
      Resources for working with Docker Swarm from Apache Brooklyn
    license_code: CLOUDSOFT-1.0
    overview: README.md
    qa: tests/swarm.tests.bom

  brooklyn.libraries:
    - https://oss.sonatype.org/content/repositories/releases/io/brooklyn/etcd/brooklyn-etcd/2.1.0/brooklyn-etcd-2.1.0.jar

  include: https://raw.githubusercontent.com/brooklyncentral/brooklyn-etcd/release/2.1.0/catalog.bom

  items:
  - id: docker-swarm-template
    name: "Docker Swarm with Discovery and CA"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size, using an Etcd cluster for discovery.
    itemType: template
    item:
      services:
      - type: docker-swarm

  - id:  docker-swarm
    name: "Docker Swarm with Discovery and CA"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size, using an Etcd cluster for discovery.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicApplication

      brooklyn.parameters:
        - name: swarm.initial.size
          label: Initial Swarm Size
          description: |
            Size of the swarm cluster when created initially
          type: integer
          default: 1
        - name: swarm.max.size
          label: Maximum Swarm Size
          description: |
            Maximum size the swarm cluster can be scaled to
          type: integer
          default: 5
        - name: etcd.initial.size
          label: Initial Etcd Size
          description: |
            Size of the etcd cluster when created initially
          type: integer
          default: 1
        - name: swarm.defaultnetwork
          label: Swarm Default Network
          description: |
            The name of a default network to create on startup
          type: string
          default: "brooklyn"

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: swarm-url-propagator
            producer: $brooklyn:child("swarm-cluster")
            propagating:
            - $brooklyn:sensor("swarm.url")

      brooklyn.children:
        - type: ca-server
          id: ca-server
          name: "ca-server"
          brooklyn.config:
            common.name: ca
        - type: etcd-cluster
          id: etcd-cluster
          name: "etcd-cluster"
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("etcd.initial.size")
            etcd.client.secure: true
            etcd.peer.secure: true
            ca.request.root.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
            shell.env:
              CA_REQUEST_ROOT_URL: $brooklyn:config("ca.request.root.url")
              HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")
              SUBNET_ADDRESS: $brooklyn:attributeWhenReady("host.subnet.address")
              INSTALL_DIR: $brooklyn:attributeWhenReady("install.dir")
            pre.install.command: |
              set -e
              cat > functions.sh <<-'EOC'
              function generate_key () {
                openssl genrsa -out $1 2048
              }

              function generate_conf () {
                local CNF=$1
                shift 1
                local ix=0
                cat > ${CNF} <<-EOF
              [ req ]
              req_extensions=v3_req
              distinguished_name=req_distinguished_name

              [ req_distinguished_name ]
              commonName                      = Common Name (eg, your name or your server\'s hostname)
              commonName_max                  = 64

              [ v3_req ]
              subjectAltName = @alt_names

              [ alt_names ]
              EOF

              while [ $# -gt 0 ] ; do
                ix=$(( $ix + 1 ))
                echo "IP.${ix} = $1" >> ${CNF}
                shift 1
              done
              }

              function generate_csr () {
                openssl req -config $1 -new -key $2 -days 1825 -subj "/CN=$(hostname)" -out $3
              }

              function failwith() {
                local err=$?
                1>&2 echo "[CLOCKER] $1"
                exit $err
              }

              function getcert() {
                local url=$1
                local file=$2
                curl -L ${url} --output ${file} --write-out "%{http_code}"  | grep 200 ||
                  failwith "${file} not received from CA"
              }
              EOC
              source functions.sh

              mkdir -p ${INSTALL_DIR}/certs
              getcert ${CA_REQUEST_ROOT_URL}/cacert/ca.pem ${INSTALL_DIR}/certs/ca.pem
              generate_key ${INSTALL_DIR}/certs/key.pem
              generate_conf ${INSTALL_DIR}/certs/csr.cnf ${HOST_ADDRESS} ${SUBNET_ADDRESS}
              generate_csr ${INSTALL_DIR}/certs/csr.cnf ${INSTALL_DIR}/certs/key.pem ${INSTALL_DIR}/certs/csr.pem

              curl -X POST --data-binary @${INSTALL_DIR}/certs/csr.pem  ${CA_REQUEST_ROOT_URL}/sign > ${INSTALL_DIR}/certs/cert.pem

            etcd.options.additional:
              $brooklyn:formatString:
              - >-
                --cert-file="%1$s/certs/cert.pem"
                --key-file="%1$s/certs/key.pem"
                --trusted-ca-file="%1$s/certs/ca.pem"
                --client-cert-auth
                --peer-cert-file="%1$s/certs/cert.pem"
                --peer-key-file="%1$s/certs/key.pem"
                --peer-trusted-ca-file="%1$s/certs/ca.pem"
                --peer-client-cert-auth
              - $brooklyn:attributeWhenReady("install.dir")
        - type: docker-swarm-cluster
          id: swarm-cluster
          name: "swarm-cluster"
          brooklyn.config:
            swarm.discovery.url: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
            docker.discovery.url: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
            ca.request.root.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
            launch.latch: $brooklyn:entity("etcd-cluster").attributeWhenReady("service.isUp")

  - id:  docker-swarm-cluster
    name: "Docker Swarm Cluster"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size.
      Requires a pre-existing discovery mechanism and references to a CA server entity.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicStartable

      brooklyn.parameters:
        - name: swarm.discovery.url
          label: Discovery URL
          description: |
            URL of a provided discovery mechanism for the swarm
          type: string
        - name: ca.cert.url
          label: CA Certificate URL
          description: |
            Location of the CA certificate to install for authentication of this engine
          type: string
        - name: node.cert.url
          label: Certificate URL
          description: |
            Location of the public key certificate to install for this engine
          type: string
        - name: private.key.url
          label: Private Key URL
          description: |
            Location of the private key to install for authentication of this engine
        - name: swarm.defaultnetwork
          label: Swarm Default Network
          description: |
            The name of a default network to create on startup
          type: string
          default: "brooklyn"
        - name: swarm.scaling.cpu.limit
          label: Swarm Scaling CPU Limit
          description: |
            The average CPU usage limit for the Swarm cluster, before another node
            will automatically be added. The default is 0.95 or 95%
          type: double
          default: 0.95

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Transformer
          brooklyn.config:
            uniqueTag: swarm-url-publisher
            enricher.producer: $brooklyn:entity("swarm-manager")
            enricher.triggerSensors:
            - host.address
            - swarm.port
            enricher.targetSensor: $brooklyn:sensor("swarm.url")
            enricher.targetValue:
              $brooklyn:formatString:
              - "tcp://%s:%d"
              - $brooklyn:entity("swarm-manager").attributeWhenReady("host.address")
              - $brooklyn:entity("swarm-manager").attributeWhenReady("swarm.port")

      brooklyn.children:
        - type: docker-swarm-manager
          id: swarm-manager
          name: "swarm-manager"
        - type: cluster
          id: docker-swarm-nodes
          name: "docker-swarm-nodes"
          brooklyn.policies:
            - type: org.apache.brooklyn.policy.autoscaling.AutoScalerPolicy
              brooklyn.config:
                autoscaler.metric:
                  $brooklyn:sensor("org.apache.brooklyn.entity.machine.MachineAttributes", "cpu.average")
                autoscaler.metricLowerBound: 0.00
                autoscaler.metricUpperBound: $brooklyn:config("swarm.scaling.cpu.limit")
                autoscaler.minPoolSize: $brooklyn:config("swarm.initial.size")
                autoscaler.maxPoolSize: $brooklyn:config("swarm.max.size")
                autoscaler.resizeUpStabilizationDelay: 30s
                autoscaler.resizeDownIterationMax: 0 # Disable scaling down
                autoscaler.resizeDownStabilizationDelay: forever
          brooklyn.enrichers:
            - type: org.apache.brooklyn.enricher.stock.Aggregator
              brooklyn.config:
                uniqueTag: swarm-cluster-cpu-averageing
                enricher.sourceSensor:
                  $brooklyn:sensor("org.apache.brooklyn.entity.machine.MachineAttributes", "machine.cpu")
                enricher.targetSensor:
                  $brooklyn:sensor("org.apache.brooklyn.entity.machine.MachineAttributes", "cpu.average")
                enricher.aggregating.fromMembers: true
                transformation: average
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("swarm.initial.size")
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: docker-swarm-node
                id: swarm-node
                name: "swarm-node"
                brooklyn.config:
                  launch.latch: $brooklyn:entity("swarm-manager").attributeWhenReady("service.isUp")


  - id: docker-engine-with-discovery
    name: Docker Engine with TLS and discovery
    description: |
      A docker-engine customised with TLS and Discovery endpoint
    itemType: entity
    item:
      type: docker-engine-tls
      brooklyn.config:
        docker.discovery.tlsoptions:
          $brooklyn:formatString:
          - >-
            --cluster-store-opt "kv.cacertfile=%1$s/.certs/ca.pem"
            --cluster-store-opt "kv.certfile=%1$s/.certs/cert.pem"
            --cluster-store-opt "kv.keyfile=%1$s/.certs/key.pem"
          - $brooklyn:attributeWhenReady("install.dir")
        docker.discovery.advertise:
          $brooklyn:formatString:
          - >-
            --cluster-advertise %s
            --cluster-store %s
          - $brooklyn:attributeWhenReady("docker.endpoint")
          - $brooklyn:config("docker.discovery.url")
        docker.additionaloptions.docker-engine-with-discovery:
          $brooklyn:formatString:
          - "%s %s %s"
          - $brooklyn:config("docker.additionaloptions.docker-engine-tls")
          - $brooklyn:config("docker.discovery.tlsoptions")
          - $brooklyn:config("docker.discovery.advertise")
        docker.additionaloptions: $brooklyn:config("docker.additionaloptions.docker-engine-with-discovery")

  - id: docker-swarm-node
    name: "Docker Swarm Node"
    description:  |
      A Docker Swarm member node
    itemType: entity
    item:
      type: docker-engine-with-discovery

      brooklyn.config:
        shell.env:
          SWARM_DISCOVERY_URL: $brooklyn:config("swarm.discovery.url")
          HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")

        post.launch.command: |
          docker run -d --name swarm-${HOST_NAME} \
            -v ${INSTALL_DIR}/.certs:/certs:ro \
            --restart unless-stopped \
            swarm join --addr=${DOCKER_ENDPOINT} \
              --discovery-opt kv.cacertfile="/certs/ca.pem" \
              --discovery-opt kv.certfile="/certs/cert.pem" \
              --discovery-opt kv.keyfile="/certs/key.pem" \
              ${SWARM_DISCOVERY_URL}


        checkRunning.command: |
          sudo service docker status &&
            docker ps | grep swarm

        stop.command: |
          docker stop swarm-${HOST_NAME}
          docker rm swarm-${HOST_NAME}
          sudo service docker stop

  - id: docker-swarm-manager
    name: "Docker Swarm Manager"
    description:  The Swarm manager engine for running Docker containers
    itemType: entity
    item:
      type: docker-engine-with-discovery

      brooklyn.parameters:
        - name: swarm.port
          label: Swarm Port
          description: |
            The TCP port the Swarm manager listens on
          type: port
          default: 3376
        # TODO fix the way brooklyn.parameters are merged in blueprints
        - name: docker.port
          label: Docker Port
          description: |
            The TCP port for Docker to listen on
          type: port
          default: 2376
        - name: docker.bindaddress
          label: Docker Bind Address
          description: |
            The network address for Docker to listen on
          type: string
          default: 0.0.0.0

      brooklyn.config:
        shell.env:
          SWARM_DISCOVERY_URL: $brooklyn:config("swarm.discovery.url")
          # parent() has a parameter for swarm.defaultnetwork with a default value
          SWARM_DEFAULT_NETWORK: $brooklyn:parent().config("swarm.defaultnetwork")
          SWARM_PORT: $brooklyn:attributeWhenReady("swarm.port")

        post.launch.command: |
          echo "[CLOCKER] Launch Swarm manager"
          docker run -d -p ${SWARM_PORT}:${SWARM_PORT} \
            -v ${INSTALL_DIR}/.certs:/certs:ro --name manager-${HOST_NAME} \
            --restart unless-stopped \
            swarm manage --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem \
              --host=0.0.0.0:${SWARM_PORT} \
              --discovery-opt kv.cacertfile="/certs/ca.pem" \
              --discovery-opt kv.certfile="/certs/cert.pem" \
              --discovery-opt kv.keyfile="/certs/key.pem" \
              ${SWARM_DISCOVERY_URL}

          echo "[CLOCKER] Setup default ${SWARM_DEFAULT_NETWORK} overlay network"
          docker network ls | grep "overlay.*${SWARM_DEFAULT_NETWORK}" ||
            docker network create --driver=overlay "${SWARM_DEFAULT_NETWORK}"

        checkRunning.command: |
          sudo service docker status &&
            docker ps | grep swarm

        stop.command: |
          docker stop manager-${HOST_NAME}
          docker rm manager-${HOST_NAME}
          sudo service docker stop
