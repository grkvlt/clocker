brooklyn.catalog:
  version: "2.0.0-SNAPSHOT"
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/471fa6e4cb58062ccbf91afc111980f9c7004981/swarm/logo.png

  publish:
    description: |
      Resources for working with Docker Swarm from Apache Brooklyn
    license_code: CLOUDSOFT-1.0
    overview: README.md
    qa: swarm.tests.bom

  brooklyn.libraries:
    - https://oss.sonatype.org/content/repositories/releases/io/brooklyn/etcd/brooklyn-etcd/2.0.0/brooklyn-etcd-2.0.0.jar

  include: https://raw.githubusercontent.com/brooklyncentral/brooklyn-etcd/master/catalog.bom

  items:
  - id: docker-swarm-template
    name: "Docker Swarm with Discovery and CA"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size, using an Etcd cluster for discovery.
    itemType: template
    item:
      services:
      - type: docker-swarm

  - id:  docker-swarm
    name: "Docker Swarm with Discovery and CA"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size, using an Etcd cluster for discovery.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicApplication

      brooklyn.parameters:
        - name: swarm.initial.size
          label: Initial Swarm Size
          description: |
            Size of the swarm cluster when created initially
          type: integer
          default: 1
        - name: etcd.initial.size
          label: Initial Etcd Size
          description: |
            Size of the etcd cluster when created initially
          type: integer
          default: 1
        - name: swarm.defaultnetwork
          label: Swarm Default Network
          description: |
            The name of a default network to create on startup
          type: string
          default: "brooklyn"

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: swarm-url-propagator
            producer: $brooklyn:child("swarm-cluster")
            propagating:
            - $brooklyn:sensor("swarm.url")

      brooklyn.children:
        - type: ca-server
          id: ca-server
          name: "ca-server"
        - type: etcd-cluster
          id: etcd-cluster
          name: "etcd-cluster"
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("etcd.initial.size")
        - type: docker-swarm-cluster
          id: swarm-cluster
          name: "swarm-cluster"
          brooklyn.config:
            swarm.discovery.url: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
            docker.discovery.url: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
            ca.request.root.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
            launch.latch: $brooklyn:entity("etcd-cluster").attributeWhenReady("service.isUp")

  - id:  docker-swarm-cluster
    name: "Docker Swarm Cluster"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size.
      Requires a pre-existing discovery mechanism and references to a CA server entity.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicStartable

      brooklyn.parameters:
        - name: swarm.discovery.url
          label: Discovery URL
          description: |
            URL of a provided discovery mechanism for the swarm
          type: string
        - name: ca.cert.url
          label: CA Certificate URL
          description: |
            Location of the CA certificate to install for authentication of this engine
          type: string
        - name: node.cert.url
          label: Certificate URL
          description: |
            Location of the public key certificate to install for this engine
          type: string
        - name: private.key.url
          label: Private Key URL
          description: |
            Location of the private key to install for authentication of this engine
        - name: swarm.defaultnetwork
          label: Swarm Default Network
          description: |
            The name of a default network to create on startup
          type: string
          default: "brooklyn"

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Transformer
          brooklyn.config:
            uniqueTag: swarm-url-publisher
            enricher.producer: $brooklyn:entity("swarm-manager")
            enricher.triggerSensors:
            - host.address
            - swarm.port
            enricher.targetSensor: $brooklyn:sensor("swarm.url")
            enricher.targetValue:
              $brooklyn:formatString:
              - "tcp://%s:%d"
              - $brooklyn:entity("swarm-manager").attributeWhenReady("host.address")
              - $brooklyn:entity("swarm-manager").attributeWhenReady("swarm.port")

      brooklyn.children:
        - type: docker-swarm-manager
          id: swarm-manager
          name: "swarm-manager"
        - type: cluster
          id: docker-swarm-nodes
          name: "docker-swarm-nodes"
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("swarm.initial.size")
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: docker-swarm-node
                id: swarm-node
                name: "swarm-node"
                brooklyn.config:
                  launch.latch: $brooklyn:entity("swarm-manager").attributeWhenReady("service.isUp")

  - id: docker-swarm-node
    name: "Docker Swarm Node"
    description:  |
      A Docker Swarm member node
    itemType: entity
    item:
      type: docker-engine-tls

      brooklyn.config:
        shell.env:
          SWARM_DISCOVERY_URL: $brooklyn:config("swarm.discovery.url")

        post.launch.command: |
          docker run -d --name swarm-${HOST_NAME} \
            swarm join --addr=${DOCKER_ENDPOINT} ${SWARM_DISCOVERY_URL}

        checkRunning.command: |
          sudo service docker status &&
            docker ps | grep swarm

        stop.command: |
          docker stop swarm-${HOST_NAME}
          docker rm swarm-${HOST_NAME}
          sudo service docker stop

  - id: docker-swarm-manager
    name: "Docker Swarm Manager"
    description:  The Swarm manager engine for running Docker containers
    itemType: entity
    item:
      type: docker-engine-tls

      brooklyn.parameters:
        - name: swarm.port
          label: Swarm Port
          description: |
            The TCP port the Swarm manager listens on
          type: port
          default: 3376
        # TODO fix the way brooklyn.parameters are merged in blueprints
        - name: docker.port
          label: Docker Port
          description: |
            The TCP port for Docker to listen on
          type: port
          default: 2376
        - name: docker.bindaddress
          label: Docker Bind Address
          description: |
            The network address for Docker to listen on
          type: string
          default: 0.0.0.0

      brooklyn.config:
        shell.env:
          SWARM_DISCOVERY_URL: $brooklyn:config("swarm.discovery.url")
          SWARM_DEFAULT_NETWORK: $brooklyn:config("swarm.defaultnetwork")
          SWARM_PORT: $brooklyn:attributeWhenReady("swarm.port")

        post.launch.command: |
          echo "[CLOCKER] Launch Swarm manager"
          docker run -d -p ${SWARM_PORT}:${SWARM_PORT} \
            -v ${INSTALL_DIR}/.certs:/certs:ro --name manager-${HOST_NAME} \
            swarm manage --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem \
              --host=0.0.0.0:${SWARM_PORT} ${SWARM_DISCOVERY_URL}
          echo "[CLOCKER] Setup default ${SWARM_DEFAULT_NETWORK} overlay network"
          docker network ls | grep "overlay.*${SWARM_DEFAULT_NETWORK}" ||
            docker network create --driver=overlay "${SWARM_DEFAULT_NETWORK}"

        checkRunning.command: |
          sudo service docker status &&
            docker ps | grep swarm

        stop.command: |
          docker stop manager-${HOST_NAME}
          docker rm manager-${HOST_NAME}
          sudo service docker stop
