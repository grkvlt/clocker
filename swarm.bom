brooklyn.catalog:
  version: "2.0.0-SNAPSHOT" # CONTAINER_SERVICE_VERSION
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/471fa6e4cb58062ccbf91afc111980f9c7004981/swarm/logo.png

  publish:
    description: |
      Resources for working with Docker Swarm from Apache Brooklyn
    license_code: CLOUDSOFT-1.0
    overview: README.md
    qa: tests/swarm.tests.bom

  brooklyn.libraries:
    - name: io.brooklyn.etcd.brooklyn-etcd
      version: "2.3.0.SNAPSHOT" # BROOKLYN_ETCD_VERSION

  items:

  - classpath://io.brooklyn.etcd.brooklyn-etcd:brooklyn-etcd/catalog.bom

  - id: docker-swarm-template
    name: "Docker Swarm with Discovery and CA"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size, using an Etcd cluster for discovery.
    itemType: template
    item:
      services:
        - type: docker-swarm

  - id:  docker-swarm
    name: "Docker Swarm with Discovery and CA"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size, using an Etcd cluster for discovery.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicApplication

      brooklyn.parameters:
        - name: swarm.initial.size
          label: Initial Swarm Size
          description: |
            Size of the swarm cluster when created initially
          type: integer
          default: 1
        - name: swarm.manager.size
          label: Swarm Manager Size
          description: |
            Number of swarm managers
          type: integer
          default: 1
        - name: swarm.max.size
          label: Maximum Swarm Size
          description: |
            Maximum size the swarm cluster can be scaled to
          type: integer
          default: 5
        - name: etcd.initial.size
          label: Initial Etcd Size
          description: |
            Size of the etcd cluster when created initially
          type: integer
          default: 1
        - name: swarm.defaultnetwork
          label: Swarm Default Network
          description: |
            The name of a default network to create on startup
          type: string
          default: "brooklyn"
        - name: swarm.port
          label: Swarm Port
          description: |
            The TCP port the Swarm manager listens on
          type: port
          default: 3376

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: swarm-url-propagator
            producer: $brooklyn:entity("docker-swarm-managers")
            propagating:
              - $brooklyn:sensor("swarm.url")

      brooklyn.children:
        - type: ca-server
          id: ca-server
          name: "ca-server"
          brooklyn.config:
            common.name: "Clocker"
        - type: etcd-cluster
          id: etcd-cluster
          name: "etcd-cluster"
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("etcd.initial.size")
            etcd.cluster.name: "clocker"
            etcd.node.spec:
              $brooklyn:entitySpec:
                type: etcd-node
                name: "etcd-node"
                brooklyn.config:
                  ca.request.root.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
                  resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
                  files.preinstall:
                    "classpath://docker/certificate-functions.sh": certificate-functions.sh
                  shell.env:
                    CA_REQUEST_ROOT_URL: $brooklyn:config("ca.request.root.url")
                    HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")
                    SUBNET_ADDRESS: $brooklyn:attributeWhenReady("host.subnet.address")
                    INSTALL_DIR: $brooklyn:attributeWhenReady("install.dir")
                    ETCDCTL_CA_FILE:
                      $brooklyn:formatString:
                        - "%s/certs/ca.pem"
                        - $brooklyn:attributeWhenReady("install.dir")
                    ETCDCTL_CERT_FILE:
                      $brooklyn:formatString:
                        - "%s/certs/cert.pem"
                        - $brooklyn:attributeWhenReady("install.dir")
                    ETCDCTL_KEY_FILE:
                      $brooklyn:formatString:
                        - "%s/certs/key.pem"
                        - $brooklyn:attributeWhenReady("install.dir")
                  pre.install.command: |
                    set -e
                    source ${INSTALL_DIR}/certificate-functions.sh

                    mkdir -p ${INSTALL_DIR}/certs
                    getcert ${CA_REQUEST_ROOT_URL}/cacert/ca.pem ${INSTALL_DIR}/certs/ca.pem
                    generate_key ${INSTALL_DIR}/certs/key.pem
                    generate_conf ${INSTALL_DIR}/certs/csr.cnf ${HOST_ADDRESS} ${SUBNET_ADDRESS}
                    generate_csr ${INSTALL_DIR}/certs/csr.cnf ${INSTALL_DIR}/certs/key.pem ${INSTALL_DIR}/certs/csr.pem

                    curl -X POST --data-binary @${INSTALL_DIR}/certs/csr.pem  ${CA_REQUEST_ROOT_URL}/sign > ${INSTALL_DIR}/certs/cert.pem
                  etcd.client.secure: true
                  etcd.peer.secure: true
                  etcd.options.additional:
                    $brooklyn:formatString:
                    - >-
                      --cert-file="%1$s/certs/cert.pem"
                      --key-file="%1$s/certs/key.pem"
                      --trusted-ca-file="%1$s/certs/ca.pem"
                      --client-cert-auth
                      --peer-cert-file="%1$s/certs/cert.pem"
                      --peer-key-file="%1$s/certs/key.pem"
                      --peer-trusted-ca-file="%1$s/certs/ca.pem"
                      --peer-client-cert-auth
                    - $brooklyn:attributeWhenReady("install.dir")
        - type: docker-swarm-cluster
          id: swarm-cluster
          name: "swarm-cluster"
          brooklyn.config:
            swarm.discovery.url: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
            docker.discovery.url: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
            ca.cert: $brooklyn:entity("ca-server").attributeWhenReady("ca.cert")
            ca.request.root.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
            launch.latch: $brooklyn:entity("etcd-cluster").attributeWhenReady("service.isUp")

  - id:  docker-swarm-cluster
    name: "Docker Swarm Cluster"
    description: |
      Creates a Swarm of Docker engines, of configurable initial size.
      Requires a pre-existing discovery mechanism and references to a CA server entity.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicStartable

      brooklyn.parameters:
        - name: swarm.discovery.url
          label: Discovery URL
          description: |
            URL of a provided discovery mechanism for the swarm
          type: string
        - name: ca.cert.url
          label: CA Certificate URL
          description: |
            Location of the CA certificate to install for authentication of this engine
          type: string
        - name: node.cert.url
          label: Certificate URL
          description: |
            Location of the public key certificate to install for this engine
          type: string
        - name: private.key.url
          label: Private Key URL
          description: |
            Location of the private key to install for authentication of this engine
        - name: swarm.defaultnetwork
          label: Swarm Default Network
          description: |
            The name of a default network to create on startup
          type: string
          default: "brooklyn"
        - name: swarm.port
          label: Swarm Port
          description: |
            The TCP port the Swarm manager listens on
          type: port
          default: 3376
        - name: swarm.scaling.cpu.limit
          label: Swarm Scaling CPU Limit
          description: |
            The average CPU usage limit for the Swarm cluster, before another node
            will automatically be added. The default is 0.95 or 95%
          type: double
          default: 0.95
        - name: swarm.recovery.quarantineFailedEntities
          label: Quarantine
          description: |
            Quarantine failed entities instead of destroying them
          type: boolean
          default: true
        - name: swarm.recovery.stabilizationDelay
          label: Stabilization Delay
          description: |
            Time period for which the service must be consistently in the same state to trigger an action
          # A restart shouldn't trigger failure
          type: org.apache.brooklyn.util.time.Duration
          default: 3m
        - name: swarm.recovery.failOnRecurringFailuresInThisDuration
          label: Fail Duration
          description: |
            Reports entity as failed if it fails two or more times in this time window
          type: org.apache.brooklyn.util.time.Duration
          default: 10m
        - name: swarm.minCores
          label: Swarm Minimum CPU Cores
          description: |
            Minimum CPU cores for provisioning Swarm nodes
          default: 4
        - name: swarm.minRam
          label: Swarm Minimum RAM
          description: |
            Minimum RAM for provisioning Swarm nodes
          default: 8g

      brooklyn.children:
        - type: load-balancer
          id: swarm-manager-load-balancer
          name: "swarm-manager-load-balancer"
          brooklyn.config:
            shell.env:
              CA_REQUEST_ROOT_URL: $brooklyn:config("ca.request.root.url")
              ENTITY_ID: $brooklyn:entityId()
              HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")
              SUBNET_ADDRESS: $brooklyn:attributeWhenReady("host.subnet.address")
              INSTALL_DIR: $brooklyn:attributeWhenReady("install.dir")
              RUN_DIR: $brooklyn:attributeWhenReady("run.dir")
            resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
            files.preinstall:
              "classpath://docker/certificate-functions.sh": certificate-functions.sh
            pre.launch.command: |
              set -e
              source ${INSTALL_DIR}/certificate-functions.sh

              mkdir -p ${RUN_DIR}/conf
              getcert ${CA_REQUEST_ROOT_URL}/cacert/ca.pem ${INSTALL_DIR}/ca.pem
              generate_key ${RUN_DIR}/conf/${ENTITY_ID}.key
              generate_conf ${INSTALL_DIR}/csr.cnf ${HOST_ADDRESS} ${SUBNET_ADDRESS}
              generate_csr ${INSTALL_DIR}/csr.cnf ${RUN_DIR}/conf/${ENTITY_ID}.key ${INSTALL_DIR}/csr.pem

              curl -X POST --data-binary @${INSTALL_DIR}/csr.pem  ${CA_REQUEST_ROOT_URL}/sign > ${RUN_DIR}/conf/${ENTITY_ID}.crt
            loadbalancer.serverpool: $brooklyn:entity("docker-swarm-managers")
            nginx.sticky: false
            member.sensor.hostname: $brooklyn:sensor("host.name")
            member.sensor.portNumber: $brooklyn:sensor("swarm.port")
            proxy.https.port: $brooklyn:parent().config("swarm.port")
            proxy.protocol: "https"
            proxy.domainName: $brooklyn:attributeWhenReady("host.address")
            controller.config.serviceUpUrlPath: "_ping"
            proxy.ssl.config:
              $brooklyn:object:
                type: brooklyn.entity.proxy.ProxySslConfig
                object.fields:
                  targetIsSsl: true
                  certificateDestination:
                    $brooklyn:formatString:
                      - "%s/conf/%s.crt"
                      - $brooklyn:attributeWhenReady("run.dir")
                      - $brooklyn:entityId()
                  keyDestination:
                    $brooklyn:formatString:
                      - "%s/conf/%s.key"
                      - $brooklyn:attributeWhenReady("run.dir")
                      - $brooklyn:entityId()

        - type: cluster
          id: docker-swarm-managers
          name: "docker-swarm-managers"
          brooklyn.policies:
            - type: org.apache.brooklyn.policy.ha.ServiceReplacer
          brooklyn.enrichers:
            - type: org.apache.brooklyn.enricher.stock.Aggregator
              brooklyn.config:
                uniqueTag: swarm-endpoint-aggregator
                enricher.sourceSensor: $brooklyn:sensor("swarm.url")
                enricher.targetSensor: $brooklyn:sensor("swarm.url.list")
                enricher.aggregating.fromMembers: true
            - type: org.apache.brooklyn.enricher.stock.Joiner
              brooklyn.config:
                uniqueTag: swarm-endpoint-joiner
                enricher.sourceSensor: $brooklyn:sensor("swarm.url.list")
                enricher.targetSensor: $brooklyn:sensor("swarm.url")
                enricher.joiner.quote: false
                enricher.joiner.minimum: 1
                enricher.joiner.maximum: 1
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("swarm.manager.size")
            dynamiccluster.quarantineFailedEntities:
              $brooklyn:parent().config("swarm.recovery.quarantineFailedEntities")
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: docker-swarm-manager
                id: swarm-manager
                name: "swarm-manager"

        - type: cluster
          id: docker-swarm-nodes
          name: "docker-swarm-nodes"
          brooklyn.policies:
            - type: org.apache.brooklyn.policy.ha.ServiceReplacer
            - type: org.apache.brooklyn.policy.autoscaling.AutoScalerPolicy
              brooklyn.config:
                autoscaler.metric:
                  $brooklyn:sensor("org.apache.brooklyn.entity.machine.MachineAttributes", "cpu.average")
                autoscaler.metricLowerBound: 0.00
                autoscaler.metricUpperBound: $brooklyn:config("swarm.scaling.cpu.limit")
                autoscaler.minPoolSize: $brooklyn:config("swarm.initial.size")
                autoscaler.maxPoolSize: $brooklyn:config("swarm.max.size")
                autoscaler.resizeUpStabilizationDelay: 30s
                autoscaler.resizeDownIterationMax: 0 # Disable scaling down
                autoscaler.resizeDownStabilizationDelay: forever
            - type: org.apache.brooklyn.policy.ha.ServiceReplacer
          brooklyn.enrichers:
            - type: org.apache.brooklyn.enricher.stock.Aggregator
              brooklyn.config:
                uniqueTag: swarm-cluster-cpu-averageing
                enricher.sourceSensor:
                  $brooklyn:sensor("org.apache.brooklyn.entity.machine.MachineAttributes", "machine.cpu")
                enricher.targetSensor:
                  $brooklyn:sensor("org.apache.brooklyn.entity.machine.MachineAttributes", "cpu.average")
                enricher.aggregating.fromMembers: true
                transformation: average
          brooklyn.config:
            cluster.initial.size: $brooklyn:config("swarm.initial.size")
            # FIXME location cannot resolve provisioning.properties entries
            #provisioning.properties.minRam:
            #  $brooklyn:parent().config("swarm.minRam")
            #provisioning.properties.minCores:
            #  $brooklyn:parent().config("swarm.minCores")
            dynamiccluster.quarantineFailedEntities:
              $brooklyn:parent().config("swarm.recovery.quarantineFailedEntities")
            dynamiccluster.firstmemberspec:
              $brooklyn:entitySpec:
                type: docker-swarm-node
                id: swarm-node
                name: "swarm-node"
                brooklyn.config:
                  launch.latch: $brooklyn:entity("docker-swarm-managers").attributeWhenReady("service.isUp")
                  swarm.defaultnetwork.create: true
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: docker-swarm-node
                id: swarm-node
                name: "swarm-node"
                brooklyn.config:
                  launch.latch: $brooklyn:entity("docker-swarm-managers").attributeWhenReady("service.isUp")

  - id: docker-engine-with-discovery
    name: Docker Engine with TLS and discovery
    description: |
      A docker-engine customised with TLS and Discovery endpoint
    itemType: entity
    item:
      type: docker-engine-tls
      brooklyn.config:
        docker.discovery.tlsoptions:
          $brooklyn:formatString:
            - >-
              --cluster-store-opt "kv.cacertfile=%1$s/.certs/ca.pem"
              --cluster-store-opt "kv.certfile=%1$s/.certs/cert.pem"
              --cluster-store-opt "kv.keyfile=%1$s/.certs/key.pem"
            - $brooklyn:attributeWhenReady("install.dir")
        docker.discovery.advertise:
          $brooklyn:formatString:
            - >-
              --cluster-advertise %s
              --cluster-store %s
            - $brooklyn:attributeWhenReady("docker.endpoint")
            - $brooklyn:config("docker.discovery.url")
        docker.additionaloptions.docker-engine-with-discovery:
          $brooklyn:formatString:
            - "%s %s %s"
            - $brooklyn:config("docker.additionaloptions.docker-engine-tls")
            - $brooklyn:config("docker.discovery.tlsoptions")
            - $brooklyn:config("docker.discovery.advertise")
        docker.additionaloptions: $brooklyn:config("docker.additionaloptions.docker-engine-with-discovery")

  - id: docker-swarm-node
    name: "Docker Swarm Node"
    description:  |
      A Docker Swarm member node
    itemType: entity
    item:
      type: docker-engine-with-discovery

      brooklyn.parameters:
        - name: swarm.port
          label: Swarm Port
          description: |
            The TCP port the Swarm manager listens on
          type: port
          default: 3376
        # TODO fix the way brooklyn.parameters are merged in blueprints
        - name: docker.port
          label: Docker Port
          description: |
            The TCP port for Docker to listen on
          type: port
          default: 2376
        - name: docker.bindaddress
          label: Docker Bind Address
          description: |
            The network address for Docker to listen on
          type: string
          default: 0.0.0.0
        - name: swarm.recovery.stabilizationDelay
          label: Stabilization Delay
          description: |
            Time period for which the service must be consistently in the same state to trigger an action
          # A restart shouldn't trigger failure
          type: org.apache.brooklyn.util.time.Duration
          default: 5m
        - name: swarm.recovery.failOnRecurringFailuresInThisDuration
          label: Fail Duration
          description: |
            Reports entity as failed if it fails two or more times in this time window
          type: org.apache.brooklyn.util.time.Duration
          default: 15m

      brooklyn.policies:
        - type: org.apache.brooklyn.policy.ha.ServiceRestarter
          brooklyn.config:
            failOnRecurringFailuresInThisDuration:
              $brooklyn:config("swarm.recovery.failOnRecurringFailuresInThisDuration")

      brooklyn.enrichers:
        - type: org.apache.brooklyn.policy.ha.ServiceFailureDetector
          brooklyn.config:
            serviceOnFire.stabilizationDelay:
              $brooklyn:config("swarm.recovery.stabilizationDelay")
            entityFailed.stabilizationDelay:
              $brooklyn:config("swarm.recovery.stabilizationDelay")
            entityRecovered.stabilizationDelay:
              $brooklyn:config("swarm.recovery.stabilizationDelay")

      brooklyn.config:
        shell.env:
          SWARM_DISCOVERY_URL: $brooklyn:config("swarm.discovery.url")
          HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")
          SWARM_DEFAULT_NETWORK: $brooklyn:parent().config("swarm.defaultnetwork")
          CREATE_NETWORK: $brooklyn:config("swarm.defaultnetwork.create")

        post.launch.command: |
          echo "[CLOCKER] Join Swarm"
          docker run -d \
            --name swarm-${HOST_NAME} \
            -v ${INSTALL_DIR}/.certs:/certs:ro \
            --restart unless-stopped \
            swarm join \
              --addr=${DOCKER_ENDPOINT_PUBLIC} \
              --discovery-opt kv.cacertfile="/certs/ca.pem" \
              --discovery-opt kv.certfile="/certs/cert.pem" \
              --discovery-opt kv.keyfile="/certs/key.pem" \
              ${SWARM_DISCOVERY_URL}

          if [[ "${CREATE_NETWORK}" ]] ; then
            echo "[CLOCKER] Setup default ${SWARM_DEFAULT_NETWORK} overlay network"
            docker network ls | grep "overlay.*${SWARM_DEFAULT_NETWORK}" ||
              docker network create --driver=overlay "${SWARM_DEFAULT_NETWORK}"
          fi

        checkRunning.command: |
          sudo service docker status &&
            docker ps | grep swarm

        stop.command: |
          docker stop swarm-${HOST_NAME}
          docker rm swarm-${HOST_NAME}
          sudo service docker stop

  - id: docker-swarm-manager
    name: "Docker Swarm Manager"
    description:  The Swarm manager engine for running Docker containers
    itemType: entity
    item:
      type: docker-engine-with-discovery

      brooklyn.parameters:
        - name: swarm.port
          label: Swarm Port
          description: |
            The TCP port the Swarm manager listens on
          type: port
          default: 3376
        # TODO fix the way brooklyn.parameters are merged in blueprints
        - name: docker.port
          label: Docker Port
          description: |
            The TCP port for Docker to listen on
          type: port
          default: 2376
        - name: docker.bindaddress
          label: Docker Bind Address
          description: |
            The network address for Docker to listen on
          type: string
          default: 0.0.0.0
        - name: swarm.strategy
          label: Swarm Strategy
          description: |
            The strategy to use when placing containers. Can be one of:
            spread (default), binpack or random
          type: string
          default: "spread"
        - name: swarm.overcommit
          label: Swarm Overcommit
          description: |
            Set the fractional percentage by which to overcommit resources.
            The default value is 0.05, or 5 percent
          type: double
          default: 0.05d
        - name: swarm.recovery.stabilizationDelay
          label: Stabilization Delay
          description: |
            Time period for which the service must be consistently in the same state to trigger an action
          # A restart shouldn't trigger failure
          type: org.apache.brooklyn.util.time.Duration
          default: 5m
        - name: swarm.recovery.failOnRecurringFailuresInThisDuration
          label: Fail Duration
          description: |
            Reports entity as failed if it fails two or more times in this time window
          type: org.apache.brooklyn.util.time.Duration
          default: 15m

      brooklyn.policies:
        - type: org.apache.brooklyn.policy.ha.ServiceRestarter
          brooklyn.config:
            failOnRecurringFailuresInThisDuration:
              $brooklyn:config("swarm.recovery.failOnRecurringFailuresInThisDuration")

      brooklyn.enrichers:
        - type: org.apache.brooklyn.policy.ha.ServiceFailureDetector
          brooklyn.config:
            serviceOnFire.stabilizationDelay:
              $brooklyn:config("swarm.recovery.stabilizationDelay")
            entityFailed.stabilizationDelay:
              $brooklyn:config("swarm.recovery.stabilizationDelay")
            entityRecovered.stabilizationDelay:
              $brooklyn:config("swarm.recovery.stabilizationDelay")
        - type: org.apache.brooklyn.enricher.stock.Transformer
          brooklyn.config:
            uniqueTag: swarm-endpoint-publisher
            enricher.triggerSensors:
              - host.address
              - swarm.port
            enricher.targetSensor: $brooklyn:sensor("swarm.endpoint")
            enricher.targetValue:
              $brooklyn:formatString:
                - "%s:%d"
                - $brooklyn:attributeWhenReady("host.address")
                - $brooklyn:attributeWhenReady("swarm.port")
        - type: org.apache.brooklyn.enricher.stock.Transformer
          brooklyn.config:
            uniqueTag: swarm-url-publisher
            enricher.triggerSensors:
              - swarm.endpoint
            enricher.targetSensor: $brooklyn:sensor("swarm.url")
            enricher.targetValue:
              $brooklyn:formatString:
                - "tcp://%s"
                - $brooklyn:attributeWhenReady("swarm.endpoint")

      brooklyn.initializers:
        - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
          brooklyn.config:
            name: swarm.version
            shell.env:
              DOCKER_HOST: $brooklyn:attributeWhenReady("swarm.url")
            command: |
              docker info | grep "^Server Version" | sed -e "s/^Server Version: //"
        - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
          brooklyn.config:
            name: swarm.role
            shell.env:
              DOCKER_HOST: $brooklyn:attributeWhenReady("swarm.url")
            command: |
              docker info | grep "^Role" | sed -e "s/^Role: //"

      brooklyn.config:
        shell.env:
          SWARM_DISCOVERY_URL: $brooklyn:config("swarm.discovery.url")
          SWARM_PORT: $brooklyn:attributeWhenReady("swarm.port")
          SWARM_ENDPOINT: $brooklyn:attributeWhenReady("swarm.endpoint")
          SWARM_URL: $brooklyn:attributeWhenReady("swarm.url")
          SWARM_STRATEGY: $brooklyn:config("swarm.strategy")
          SWARM_OVERCOMMIT: $brooklyn:config("swarm.overcommit")

        post.launch.command: |
          echo "[CLOCKER] Launch Swarm manager"
          docker run -d \
            -p ${SWARM_PORT}:${SWARM_PORT} \
            -v ${INSTALL_DIR}/.certs:/certs:ro \
            --name manager-${HOST_NAME} \
            --restart unless-stopped \
            swarm manage \
              --tlsverify \
              --tlscacert=/certs/ca.pem \
              --tlscert=/certs/cert.pem \
              --tlskey=/certs/key.pem \
              --host=0.0.0.0:${SWARM_PORT} \
              --strategy ${SWARM_STRATEGY} \
              --cluster-opt swarm.overcommit=${SWARM_OVERCOMMIT} \
              --replication \
              --advertise ${SWARM_ENDPOINT} \
              --discovery-opt kv.cacertfile="/certs/ca.pem" \
              --discovery-opt kv.certfile="/certs/cert.pem" \
              --discovery-opt kv.keyfile="/certs/key.pem" \
              ${SWARM_DISCOVERY_URL}

        checkRunning.command: |
          sudo service docker status &&
            docker ps | grep swarm

        stop.command: |
          docker stop manager-${HOST_NAME}
          docker rm manager-${HOST_NAME}
          sudo service docker stop
