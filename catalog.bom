brooklyn.catalog:
  version: "2.0.0-SNAPSHOT"
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png

  publish:
    description:  Resources for working with Docker containers from Apache Brooklyn
    license_code: Apache-2.0
    overview:     README.md
    qa:           catalog.tests.bom

  items:
  - id:           docker-engine
    description:  The engine for running Docker containers
    itemType:     entity
    item:

      name: Docker Engine (host)
      type: org.apache.brooklyn.entity.software.base.VanillaSoftwareProcess

      provisioning.properties:
        osFamily: centos

      brooklyn.parameters:
      - name: docker.additionaloptions
        description: The additional options to pass to the engine on startup
        type: string
      - name: image.preinstall
        description: A docker hub image id to pull after installation
        default: cloudsoft/centos:7

      brooklyn.config:
        dontRequireTtyForSudo: true
        image.preinstall: cloudsoft/centos:7

      shell.env:
        DOCKER_ADDITIONAL_OPTIONS: $brooklyn:config("docker.additionaloptions")
        DOCKER_IMAGE: $brooklyn:config("image.preinstall")

      install.command: |
        set -e # need all commands to execute successfully

        sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'
        [dockerrepo]
        name=Docker Repository
        baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
        enabled=1
        gpgcheck=1
        gpgkey=https://yum.dockerproject.org/gpg
        EOF
        sudo yum -y install docker-engine

        echo "Setting up /etc/systemd/system/docker.service.d/docker.conf"
        sudo mkdir -p /etc/systemd/system/docker.service.d
        sudo tee /etc/systemd/system/docker.service.d/docker.conf <<-EOF
        [Service]
        # Need to clear the default first and then set a custom value
        ExecStart=
        ExecStart=/usr/bin/docker daemon ${DOCKER_ADDITIONAL_OPTIONS}
        EOF
        sudo systemctl daemon-reload

      launch.command: |
        [ -z "${DOCKER_HOST}" ] && SUDO=sudo
        sudo service docker start && \
          ( $SUDO docker ${DOCKER_ADDITIONAL_OPTIONS} images --format="{{.Repository}}:{{.Tag}}" | grep -q "$DOCKER_IMAGE" || \
          $SUDO docker ${DOCKER_ADDITIONAL_OPTIONS} pull $DOCKER_IMAGE )
      stop.command:         sudo service docker stop
      checkRunning.command: sudo service docker status

      # ensure docker running before starting children
      childStartMode: foreground_late

  - id: docker-engine-tls
    name: "Docker Engine with TLS"
    description: |
      A docker-engine customised with TLS
    itemType: entity
    item:
      type: docker-engine

      brooklyn.parameters:
      - name: tls.port
        description: The docker TLS port to listen on.
        type: port
        default: 2376
      - name: docker.bindaddress
        description: The docker network address to to listen on.
        type: string
        default: 0.0.0.0
      - name: ca.request.root
        description: |
          Optional: URL for a CA server. Use this or the triplet of
          'ca.cert.url', 'node.cert.url', 'private.key.url'
      - name: ca.cert.url
        description: |
          URL for the CA certificate
      - name: node.cert.url
        description: |
          URL for the TLS certificate for this Docker engine
      - name: private.key.url
        description: |
          URL for the private key of this Docker engine

      brooklyn.enrichers:
      - type: org.apache.brooklyn.enricher.stock.Transformer
        brooklyn.config:
          uniqueTag: docker-endpoint-generator
          enricher.triggerSensors:
          - host.name
          - tls.port
          enricher.sourceSensor: $brooklyn:sensor("tls.port")
          enricher.targetSensor: $brooklyn:sensor("docker.endpoint")
          enricher.targetValue:
            $brooklyn:formatString:
            - "tcp://%s:%s/"
            - $brooklyn:attributeWhenReady("host.address")
            - $brooklyn:attributeWhenReady("tls.port")

      brooklyn.config:
        tls.port: 2376
        docker.bindaddress: 0.0.0.0
        docker.url:
          $brooklyn:formatString:
          - "tcp://%s:%s"
          - $brooklyn:attributeWhenReady("host.address")
          - $brooklyn:config("tls.port")
        docker.additionaloptions:
          $brooklyn:formatString:
          - "-H %s --tlsverify --tlscacert=%2$s/.certs/ca.pem --tlscert=%2$s/.certs/cert.pem --tlskey=%2$s/.certs/key.pem"
          - $brooklyn:config("docker.url")
          - $brooklyn:attributeWhenReady("install.dir")

      env:
        CA_CERT_ROOT: $brooklyn:config("ca.request.root")
        CA_CERT_URL: $brooklyn:config("ca.cert.url")
        NODE_CERT_URL: $brooklyn:config("node.cert.url")
        PRIV_KEY_URL: $brooklyn:config("private.key.url")
        HOST_ADDRESS: $brooklyn:attributeWhenReady("host.address")
        INSTALL_DIR: $brooklyn:attributeWhenReady("install.dir")
        DOCKER_HOST: $brooklyn:config("docker.url")
        DOCKER_ADDITIONAL_OPTIONS: $brooklyn:config("docker.additionaloptions")

      customize.command: |
        set -e # need all commands to execute successfully

        mkdir -p ${INSTALL_DIR}/.certs
        function failwith() {
          local err=$?
          1>&2 echo $1
          exit $err
        }
        function getcert() {
          local url=$1
          local file=$2
          curl -L ${url} --output ${file} --write-out "%{http_code}"  | grep 200 ||
            failwith "${file} not received from CA"
        }
        if [ "${CA_CERT_ROOT}" ] ; then
            echo "Requesting creation of certificates from ${CA_CERT_ROOT}"
            curl -d "" -X POST --write-out "%{http_code}" ${CA_CERT_ROOT}/generate/${HOST_ADDRESS} | grep 201 ||
              failwith "Could not request certificate for ${HOST_ADDRESS} from ${CA_CERT_ROOT}"
            echo "Requesting generated certificates from ${CA_CERT_ROOT}"
            getcert ${CA_CERT_ROOT}/cert/${HOST_ADDRESS}/ca.pem    ${INSTALL_DIR}/.certs/ca.pem
            getcert ${CA_CERT_ROOT}/cert/${HOST_ADDRESS}/cert.pem  ${INSTALL_DIR}/.certs/cert.pem
            getcert ${CA_CERT_ROOT}/cert/${HOST_ADDRESS}/key.pem   ${INSTALL_DIR}/.certs/key.pem
            echo "Certifcates for ${HOST_ADDRESS} received"
        else
            echo "Downloading certificates from configuration settings"
            getcert ${CA_CERT_URL}    ${INSTALL_DIR}/.certs/ca.pem
            getcert ${NODE_CERT_URL}  ${INSTALL_DIR}/.certs/cert.pem
            getcert ${PRIV_KEY_URL}   ${INSTALL_DIR}/.certs/key.pem
        fi
        # TODO verify certs with openssl
        test -f ${INSTALL_DIR}/.certs/ca.pem || failwith "Failed to download ca.pem"
        test -f ${INSTALL_DIR}/.certs/cert.pem || failwith "Failed to download cert.pem"
        test -f ${INSTALL_DIR}/.certs/key.pem || failwith "Failed to download key.pem"

        # Set up 'well known' Docker environment variables for host and TLS
        if ! grep docker_client ${HOME}/.bashrc ; then
          echo ". docker_client.rc" >> ${HOME}/.bashrc
        fi
        cat > ${HOME}/docker_client.rc <<-EOF
        export DOCKER_TLS_VERIFY=true
        export DOCKER_CERT_PATH=${INSTALL_DIR}/.certs
        export DOCKER_HOST=${DOCKER_HOST}
        EOF


      checkRunning.command: |
         sudo service docker status | fgrep '(running)'

  - id: docker-engine-container
    description: An easy way to launch a Docker container, as a child of a docker-engine entity
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.software.base.VanillaSoftwareProcess

      brooklyn.config:
        dontRequireTtyForSudo: true

      # TODO support DSL in name: $brooklyn:formatString("Container (%s)", $brooklyn:config("container"))
      # TODO advertise container id as a sensor.
      name: Container
      shell.env:
        DOCKER_IMAGE: $brooklyn:config("container")
      launch.command: |
        [ -z "${DOCKER_HOST}" ] && SUDO=sudo ; $SUDO docker run -d ${DOCKER_IMAGE}
      brooklyn.parameters:
      - name: container
        type: string
