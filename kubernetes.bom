brooklyn.catalog:
  version: "2.0.0-SNAPSHOT" # CONTAINER_SERVICE_VERSION
  publish:
    description: |
      Resources for working with Kubernetes from Apache Brooklyn
    license_code: CLOUDSOFT-1.0

  items:
  - id: kubernetes-cluster-template
    name: "Kubernetes Cluster"
    description: |
      Kubernetes cluster with a master node and worker nodes
    iconUrl: https://pbs.twimg.com/media/Bt_pEfqCAAAiVyz.png
    itemType: template
    item:
      services:
        - type: kubernetes-cluster-application
          name: "Kubernetes Cluster"

  - id: kubernetes-cluster-application
    name: "Kubernetes Cluster"
    description: |
      Kubernetes cluster with a master node and worker nodes
    iconUrl: https://pbs.twimg.com/media/Bt_pEfqCAAAiVyz.png
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicApplication

      brooklyn.parameters:
        - name: kubernetes.initial.size
          label: "Kubernetes Cluster Size"
          type: integer
          default: 3
        - name: etcd.initial.size
          label: "Etcd Cluster Size"
          type: integer
          default: 3
        - name: etcd.client.port
          label: "Etcd Client Port"
          type: port
          default: 4001
        - name: etcd.version
          label: "Etcd Version"
          type: string
          default: 3.0.4
        - name: kubernetes.version
          label: "Kubernetes Version"
          type: string
          default: "1.3.5"
        - name: kubernetes.cluster.name
          label: "Kubernetes Cluster Name"
          type: string
          default: "amp"

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: kubernetes-url-propagator
            producer: $brooklyn:entity("kubernetes-manager")
            propagating:
              - $brooklyn:sensor("kubernetes.url")
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: kubernetes-main-uri-propagator
            sensorMapping:
              $brooklyn:sensor("kubernetes.url"):
                $brooklyn:sensor("org.apache.brooklyn.core.entity.Attributes", "main.uri")

      brooklyn.config:
        start.timeout: 30m

      brooklyn.children:
        - type: ca-server
          id: ca-server
          name: "ca-server"
          brooklyn.config:
            common.name: "Kubernetes"
        - type: etcd-cluster
          id: etcd-cluster
          name: "etcd-cluster"
          brooklyn.config:
            cluster.initial.size: $brooklyn:parent().config("etcd.initial.size")
            etcd.cluster.name: "kubernetes"
        - type: kubernetes-cluster
          id: kubernetes-cluster
          name: "kubernetes-cluster"
          brooklyn.config:
            ca.cert: $brooklyn:entity("ca-server").attributeWhenReady("ca.cert")
            ca.request.root.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            resources.preInstall.latch: $brooklyn:entity("ca-server").attributeWhenReady("service.isUp")
            launch.latch: $brooklyn:entity("etcd-cluster").attributeWhenReady("service.isUp")

  - id: kubernetes-cluster
    name: "Kubernetes Cluster"
    description: |
      Creates a Kubernetes cluster with a manager and a configurable number of workers.
      Requires a pre-existing discovery mechanism and references to a CA server entity.
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicStartable

      brooklyn.parameters:
        - name: kubernetes.initial.size
          label: Initial Cluster Size
          description: |
            Size of the cluster when created initially
          type: integer
          default: 1
        - name: kubernetes.recovery.quarantineFailedEntities
          label: Quarantine
          description: |
            Quarantine failed entities instead of destroying them
          type: boolean
          default: true

      brooklyn.children:
        - type: kubernetes-manager
          id: kubernetes-manager
          name: "kubernetes-manager"
        - type: cluster
          id: kubernetes-workers
          name: "kubernetes-workers"
          brooklyn.policies:
            - type: org.apache.brooklyn.policy.ha.ServiceReplacer
          brooklyn.config:
            cluster.initial.size: $brooklyn:parent().config("kubernetes.initial.size")
            dynamiccluster.quarantineFailedEntities:
              $brooklyn:parent().config("kubernetes.recovery.quarantineFailedEntities")
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: kubernetes-worker
                id: kubernetes-worker
                name: "kubernetes-worker"
                brooklyn.config:
                  launch.latch: $brooklyn:entity("kubernetes-manager").attributeWhenReady("service.isUp")

  - id: kubernetes-master
    itemType: entity
    item:
      type: kubernetes-worker
      name: "kubernetes-master"
      description: |
        Kubernetes master node

      brooklyn.config:
        kubernetes.url:
          $brooklyn:attributeWhenReady("kubernetes.url")
        kubernetes.endpoint:
          $brooklyn:attributeWhenReady("kubernetes.endpoint")

      brooklyn.children:
        - type: kube-apiserver-service
          id: kube-apiserver
          name: "kube-apiserver"
        - type: kube-controller-manager-service
          id: kube-controller-manager
          name: "kube-controller-manager"
        - type: kube-scheduler-service
          id: kube-scheduler
          name: "kube-scheduler"
        - type: kube-dns-pod
          id: kube-dns
          name: "kube-dns"
        - type: kube-dashboard-pod
          id: kube-dashboard
          name: "kube-dashboard"

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: kubernetes-apiserver-url-propagator
            producer: $brooklyn:entity("kube-apiserver")
            propagating:
              - $brooklyn:sensor("kubernetes.url")
              - $brooklyn:sensor("kubernetes.endpoint")

  - id: kubernetes-worker
    itemType: entity
    item:
      type: centos-software-process
      name: "kubernetes-worker"
      description: |
        Kubernetes worker node

      brooklyn.config:
        provisioning.properties:
          osFamily: centos
          osVersionRegex: 7
          loginUser: centos
          minRam: 4g
          minCores: 2

        shell.env:
          ETCD_VERSION: $brooklyn:config("etcd.version")
          KUBERNETES_VERSION: $brooklyn:config("kubernetes.version")
          KUBERNETES_URL: $brooklyn:config("kubernetes.url")
          KUBERNETES_ENDPOINT: $brooklyn:config("kubernetes.endpoint")

      brooklyn.children:
        - type: flannel-network-agent
          id: flannel-network-agent
          name: "flannel-network-agent"
          brooklyn.config:
            flannel.addressRange: $brooklyn:config("flannel.network")
            etcd.endpoints: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.urls")
        - type: docker-engine-with-resilience
          id: docker-engine
          name: "docker-engine"
          brooklyn.config:
            launch.latch: $brooklyn:sibling("flannel-network-agent").attributeWhenReady("service.isUp")
            docker.additionaloptions:
              $brooklyn:formatString:
                - >-
                  --mtu=%s
                  --bip=%s
                  --ip-masq=false
                  --iptables=false
                - $brooklyn:entity("flannel-network-agent").attributeWhenReady("flannel.mtu")
                - $brooklyn:entity("flannel-network-agent").attributeWhenReady("flannel.subnet")
        - type: calico-cni-plugin
          id: calico-cni-plugin
          name: "calico-cni-plugin"
          brooklyn.config:
            launch.latch: $brooklyn:sibling("docker-engine").attributeWhenReady("service.isUp")
            etcd.endpoints: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.urls")
        - type: kube-proxy-service
          id: kube-proxy
          name: "kube-proxy"
        - type: kubelet-service
          id: kubelet
          name: "kubelet"

  - id: kubernetes-node-cluster
    description: "Kubernetes cluster with a master node and worker nodes"
    name: "Kubernetes Fabric Cluster"
    item:
      type: cluster
      id: kubernetes-cluster
      name: "kubernetes-cluster"

      brooklyn.config:
        initialSize: $brooklyn:config("kubernetes.initial.size")

        memberSpec:
          $brooklyn:entitySpec:
            type: kubernetes-node

  - id: kubernetes-service
    name: "Kubernetes Service"
    description: |
      A software process running a Kubernetes service daemon
    itemType: entity
    item:
      type: child-software-process

      brooklyn.config:
        download.url:
          $brooklyn:formatString:
            - "https://storage.googleapis.com/kubernetes-release/release/v%s/bin/linux/amd64/%s"
            - $brooklyn:config("kubernetes.version")
            - $brooklyn:config("kubernetes.service")

        shell.env:
          DOWNLOAD_URL: $brooklyn:config("download.url")
          K8S_SERVICE: $brooklyn:config("kubernetes.service")
          CLUSTER_NAME: $brooklyn:config("kubernetes.cluster.name")
          HOST_ADDRESS: $brooklyn:attribueWhenReady("host.address")
          HOST_SUBNET_ADDRESS: $brooklyn:attribueWhenReady("host.subnet.address")

        install.command: |
          wget ${DOWNLOAD_URL}
          chmod +x ${K8S_SERVICE}
          sudo cp ${K8S_SERVICE} /usr/bin

        launch.command: |
          sudo systemctl daemon-reload
          sudo systemctl enable ${K8S_SERVICE}
          sudo systemctl start ${K8S_SERVICE}

        stop.command: |
          sudo systemctl stop ${K8S_SERVICE}

        checkRunning.command: |
          sudo systemctl status ${K8S_SERVICE}

  - id: kube-proxy-service
    name: "Kubernetes Proxy"
    describtion: |
      The Kubernetes proxy service
    itemType: entity
    item:
      type: kubernetes-service

      brooklyn.config:
        kubernetes.service: "kube-proxy"

        shell.env:
          KUBERNETES_URL: $brooklyn:config("kubernetes.url")

        customize.command: |
          sudo -E tee /usr/lib/systemd/system/kube-proxy.service <<-EOF
          [Unit]
          Description=Kubernetes Proxy
          After=network.target
          [Service]
          ExecStart=/opt/kubernetes/bin/kube-proxy \
            --logtostderr=true \
            --v=4 \
            --masquerade-all=true \
            --master=${KUBERNETES_URL}
          Restart=on-failure
          [Install]
          WantedBy=multi-user.target
          EOF

  - id: kubelet-service
    name: "Kubelet"
    describtion: |
      The Kubernetes Kubelet service
    itemType: entity
    item:
      type: kubernetes-service

      brooklyn.config:
        kubernetes.service: "kubelet"

        shell.env:
          FLANNEL_SUBNET: $brooklyn:entity("flannel-network-agent").attributeWhenReady("flannel.subnet")
          KUBERNETES_URL: $brooklyn:config("kubernetes.url")

        customize.command: |
          sudo mkdir -p /etc/kubernetes/manifests
          sudo -E tee /etc/kubernetes/kubeconfig <<-EOF
          current-context: default
          apiVersion: v1
          clusters:
          - cluster:
              api-version: v1
              server: ${KUBERNETES_URL}
            name: ${CLUSTER_NAME}
          EOF
          sudo -E tee /usr/lib/systemd/system/kubelet.service <<-EOF
          [Unit]
          Description=Kubernetes Kubelet
          After=docker.service
          Requires=docker.service
          [Service]
          ExecStart=/usr/bin/kubelet \
            --address=0.0.0.0 \
            --allow-privileged=true \
            --config=/etc/kubernetes/manifests \
            --hostname-override=${HOST_ADDRESS} \
            --api-servers=${KUBERNETES_URL}\
            --network-plugin-dir=/etc/cni/net.d \
            --network-plugin=cni \
            ${EXTRA_OPTS} \
            --pod-cidr=${FLANNEL_SUBNET} \
            --container-runtime=docker \
            --reconcile-cidr=true \
            --serialize-image-pulls=false \
            --cluster-dns=${DNS_SERVICE_IP} \
            --cluster-domain=cluster.local \
            --logtostderr=true
          Restart=always
          RestartSec=10
          [Install]
          WantedBy=multi-user.target
          EOF

  - id: kube-apiserver-service
    name: "Kubernetes API Server"
    describtion: |
      The Kubernetes API server service
    itemType: entity
    item:
      type: kubernetes-service

      brooklyn.parameters:
        - name: kubernetes.apiserver.port
          label: "Kubernetes API Server Port"
          type: port
          default: 8080

      brooklyn.enrichers:
        - type: org.apache.brooklyn.enricher.stock.Transformer
          brooklyn.config:
            uniqueTag: kubernetes-apiserver-endpoint-publisher
            enricher.triggerSensors:
              - $brooklyn:sensor("host.address")
              - $brooklyn:sensor("kubernetes.apiserver.port")
            enricher.targetSensor: $brooklyn:sensor("kubernetes.endpoint")
            enricher.targetValue:
              $brooklyn:formatString:
                - "%s:%d"
                - $brooklyn:attributeWhenReady("host.address")
                - $brooklyn:attributeWhenReady("kubernetes.apiserver.port")
        - type: org.apache.brooklyn.enricher.stock.Transformer
          brooklyn.config:
            uniqueTag: kubernetes-apiserver-url-publisher
            enricher.triggerSensors:
              - $brooklyn:sensor("kubernetes.endpoint")
            enricher.targetSensor: $brooklyn:sensor("kubernetes.url")
            enricher.targetValue:
              $brooklyn:formatString:
                - "http://%s"
                - $brooklyn:attributeWhenReady("kubernetes.endpoint")

      brooklyn.config:
        kubernetes.service: "kube-apiserver"

        customize.command: |
          sudo -E tee /usr/lib/systemd/system/kube-apiserver.service <<-EOF
          [Unit]
          Description=Kubernetes API Server
          Documentation=https://github.com/kubernetes/kubernetes
          [Service]
          ExecStart=/opt/kubernetes/bin/kube-apiserver \
            --logtostderr=true \
            --v=4 \
            --etcd-servers=${ETCD_SERVERS} \
            --insecure-bind-address=0.0.0.0 \
            --insecure-port=8080 \
            --advertise-address=${MASTER_IP} \
            --allow-privileged=true \
            --service-cluster-ip-range=${SERVICE_CLUSTER_IP_RANGE} \
            --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true \
            --admission-control=${ADMISSION_CONTROL}
          Restart=on-failure
          [Install]
          WantedBy=multi-user.target

  - id: kube-controller-manager-service
    name: "Kubernetes Controller"
    describtion: |
      The Kubernetes controller-manager service
    itemType: entity
    item:
      type: kubernetes-service

      brooklyn.config:
        kubernetes.service: "kube-controller-manager"

        customize.command: |
          sudo -E tee /usr/lib/systemd/system/kube-controller-manager.service <<-EOF
          [Unit]
          Description=Kubernetes Controller Manager
          Documentation=https://github.com/kubernetes/kubernetes
          [Service]
          ExecStart=/opt/kubernetes/bin/kube-controller-manager \
            --logtostderr=true \
            --v=4 \
            --master=${KUBERNETES_ENDPOINT} \
            --kubeconfig=/etc/kubernetes/kubeconfig \
            --allocate-node-cidrs=true \
            --configure-cloud-routes=true \
            --leader-elect=true \
            --cluster-name=${CLUSTER_NAME} \
            --cluster-cidr=${FLANNEL_NETWORK}
          Restart=on-failure
          [Install]
          WantedBy=multi-user.target
          EOF

  - id: kube-scheduler-service
    name: "Kubernetes Scheduler"
    describtion: |
      The Kubernetes scheduler service
    itemType: entity
    item:
      type: kubernetes-service

      brooklyn.config:
        kubernetes.service: "kube-scheduler"

        customize.command: |
          sudo -E tee /usr/lib/systemd/system/kube-scheduler.service <<-EOF
          [Unit]
          Description=Kubernetes Scheduler
          Documentation=https://github.com/kubernetes/kubernetes
          [Service]
          ExecStart=/opt/kubernetes/bin/kube-scheduler \
            --logtostderr=true \
            --v=4 \
            --leader-elect=true \
            --master=${KUBERNETES_ENDPOINT}
          Restart=on-failure
          [Install]
          WantedBy=multi-user.target
          EOF

  - id: kubernetes-pod
    name: "Kubernetes Pod"
    description: |
      A Kubernetes pod deployment
    itemType: entity
    item:
      type: child-software-process

      brooklyn.parameters:
        - name: kubernetes.pod.definition
          label: "Kubernetes Pod Definition"
          type: string
        - name: kubernetes.pod.namespace
          label: "Kubernetes Pod Namespace"
          type: string
          default: "default"
        - name: kubernetes.pod.name
          label: "Kubernetes Pod Name"
          type: string

      brooklyn.config:
        templates.install:
          $brooklyn:config("kubernetes.pod.definition"): "pod.yaml"

        shell.env:
          POD: $brooklyn:config("kubernetes.pod.name")
          NAMESPACE: $brooklyn:config("kubernetes.pod.namespace")

        launch.command: |
          kubectl create -f ${INSTALL_DIR}/pod.yaml

        checkRunning.command: |
          kubectl get pod --namespace=${NAMESPACE} | grep ${POD}

  - id: kube-dns-pod
    name: "KubeDNS Pod"
    description: |
      KubeDNS pod deployment
    itemType: entity
    item:
      type: kubernetes-pod

      brooklyn.config:
        kubernetes.pod.name: "kubedns"
        kubernetes.pod.definition: "classpath://kubernetes/kube-dns.yaml"
        kubernetes.pod.namespace: "kube-system"

  - id: kube-dashboard-pod
    name: "Kubernetes Dashboard Pod"
    description: |
      Kubernetes dashboard pod deployment
    itemType: entity
    item:
      type: kubernetes-pod

      brooklyn.config:
        kubernetes.pod.name: "kube-dashboard"
        kubernetes.pod.definition: "classpath://kubernetes/kube-dashboard.yaml"
        kubernetes.pod.namespace: "kube-system"
