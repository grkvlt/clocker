brooklyn.catalog:
  version: 2.0.0-SNAPSHOT
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png
  dependsOn: ["common.tests.bom"]
  license_code: TODO
  license_url: TODO
  items:

  - id: test-docker-run-pulls
    item:
      type: org.apache.brooklyn.test.framework.TestCase
      name: Test that Docker Swarm cluster can pull containers from docker hub automatically
      brooklyn.parameters:
        - install.dir
        - swarm.url
      brooklyn.children:
      - type: ssh-test
        shell.env:
          INSTALL_DIR: $brooklyn:config("install.dir")
        command: |
            set -e
            cd $INSTALL_DIR
            docker rmi busybox || true # OK to fail
            ! docker images | grep busybox
            docker run --rm busybox echo Hello from busybox-image | grep busybox-image && docker images | grep busybox
        assertStatus:
          equals: 0
        assertOut:
          contains: "busybox-image"

  - id: test-network-exists
    item:
      type: org.apache.brooklyn.test.framework.TestCase
      name: Test Network Exists
      brooklyn.parameters:
        - name: network.name
          description: Name of the network
      brooklyn.children:
      - type: ssh-test
        shell.env:
          NETWORK_NAME: $brooklyn:config("network.name")
        command: |
            echo "[TEST] Checking ID of network ${NETWORK_NAME}"
            docker network inspect --format "{{.ID}}" "${NETWORK_NAME}"
        assertStatus:
          equals: 0


  - id: test-swarm
    name: Docker Swarm Tests
    description: |
      Tests on Docker Swarm over TLS
    itemType: entity
    item:
      type: org.apache.brooklyn.entity.stock.BasicApplication
      brooklyn.config:
        timeout: 1h
        timeout.initialStartup: 1h
        swarm.initial.size: 1
        etcd.initial.size: 1

      brooklyn.children:

        # The swarm to test
        - type: docker-swarm
          id: swarm
          brooklyn.config:
            swarm.initial.size: 1
            etcd.initial.size: 1
            swarm.defaultnetwork: "brooklyn"

        # A client for talking to the swarm
        - type: test-docker-client-with-tls
          name: Swarm client with TLS
          id: swarm-client
          brooklyn.config:
            customize.latch: $brooklyn:entity("swarm").attributeWhenReady("service.isUp")
            client.address: $brooklyn:attributeWhenReady("host.address")
            ca.url:  $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            docker.url: $brooklyn:entity("swarm").attributeWhenReady("swarm.url")

        - type: org.apache.brooklyn.test.framework.TestCase
          name: Swarm TLS tests
          brooklyn.children:

          - type: assert-up
            name: "TEST-1 assert up"
            brooklyn.config:
              targetId: swarm

          - type: assert-running
            name: "TEST-2 assert running"
            brooklyn.config:
              targetId: swarm

          - type: test-connect-fails-without-tls
            name: "TEST-3 Test connect fails without TLS"
            brooklyn.config:
              targetId: swarm-client
              docker.url: $brooklyn:entity("swarm").attributeWhenReady("swarm.url")

          # Run the docker tests against the swarm
          - type: docker-engine-test
            name: "TEST-4 Test Swarm over TLS"
            targetId: swarm-client
            brooklyn.config:
              start.latch: $brooklyn:entity("swarm-client").attributeWhenReady("service.isUp")

          - type: test-docker-run-pulls
            name: "TEST-5 Test Docker run pulls"
            brooklyn.config:
              targetId: swarm-manager
              swarm.url: $brooklyn:component("swarm").attributeWhenReady("swarm.url")
              install.dir: $brooklyn:component("swarm-manager").attributeWhenReady("install.dir")
#
#          TODO re-enable these after networking updates
#          - type: test-network-exists
#            name: "TEST-6 Test default network exists"
#            brooklyn.config:
#              targetId: swarm-client
#              swarm.url: $brooklyn:component("swarm").attributeWhenReady("swarm.url")
#              ca.url: $brooklyn:component("ca-server").attributeWhenReady("main.uri")
#              client.address: $brooklyn:component("swarm-client").attributeWhenReady("host.address")
#              network.name: $brooklyn:component("swarm").config("swarm.defaultnetwork")
#
#          - type: test-network-exists
#            name: "TEST-7 Test named network exists"
#            brooklyn.config:
#              targetId: swarm-client
#              swarm.url: $brooklyn:component("swarm").attributeWhenReady("swarm.url")
#              ca.url: $brooklyn:component("ca-server").attributeWhenReady("main.uri")
#              client.address: $brooklyn:component("swarm-client").attributeWhenReady("host.address")
#              network.name: "test-network-name"
