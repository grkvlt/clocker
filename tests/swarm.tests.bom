brooklyn.catalog:
  version: "2.0.0-SNAPSHOT" # CONTAINER_SERVICE_VERSION
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/471fa6e4cb58062ccbf91afc111980f9c7004981/swarm/logo.png
  dependsOn:
    - tests/common.tests.bom
  license_code: CLOUDSOFT-1.0

  brooklyn.config:
    timeout: 1h
    timeout.initialStartup: 1h
    timeout.runtimeAssertion: 1h

  items:

  - id: test-docker-run-pulls
    item:
      type: org.apache.brooklyn.test.framework.TestCase
      description: |
        Test that Docker Swarm cluster can pull containers from Docker Hub
        automatically
      brooklyn.parameters:
        - install.dir
      brooklyn.children:
        - type: ssh-test
          shell.env:
            INSTALL_DIR: $brooklyn:config("install.dir")
          command: |
            set -e
            cd ${INSTALL_DIR}
            docker rmi busybox || true # OK to fail
            ! docker images | grep busybox
            docker run --rm busybox echo "Hello from busybox-image" | grep busybox-image
            docker images | grep busybox
          assertStatus:
            equals: 0
          assertOut:
            contains: "busybox-image"

  - id: test-swarm-networking
    item:
      type: org.apache.brooklyn.test.framework.TestCase
      description: |
        Test Swarm networking between containers on different hosts, using
        shared Docker overlay network
      brooklyn.parameters:
        - network.name
      brooklyn.children:
        - type: ssh-test
          name: "TEST-6-1 Test network exists"
          brooklyn.config:
            shell.env:
              NETWORK_NAME: $brooklyn:config("network.name")
            command: |
              echo "[TEST] Checking ID of network ${NETWORK_NAME}"
              docker network inspect --format "{{.ID}}" ${NETWORK_NAME}
            assertStatus:
              equals: 0
            assertErr:
              isEmpty: true
        - type: ssh-test
          name: "TEST-6-2 Test network properties"
          brooklyn.config:
            shell.env:
              NETWORK_NAME: $brooklyn:config("network.name")
            command: |
              echo "[TEST] Create container on ${NETWORK_NAME} network"
              docker run -di --name workload_A --net ${NETWORK_NAME} cloudsoft/centos:7 /bin/bash
              CONTAINER_NETWORK_ID=$(docker inspect --format "{{.NetworkSettings.Networks.${NETWORK_NAME}.NetworkID}}" workload_A)
              NETWORK_ID=$(docker network inspect --format "{{.ID}}" ${NETWORK_NAME})
              docker rm -f workload_A
              [[ "${CONTAINER_NETWORK_ID}" == "${NETWORK_ID}" ]]
            assertStatus:
              equals: 0
            assertErr:
              isEmpty: true
        - type: ssh-test
          name: "TEST-6-3 Test same network connectivity"
          brooklyn.config:
            shell.env:
              NETWORK_NAME: $brooklyn:config("network.name")
            command: |
              echo "[TEST] Creating two containers on ${NETWORK_NAME} network"
              docker run -di --name workload_B --net ${NETWORK_NAME} cloudsoft/centos:7 /bin/bash
              docker run -di --name workload_C --net ${NETWORK_NAME} -e affinity:container!=workload_B cloudsoft/centos:7 /bin/bash
              docker exec workload_B ping -W 10 -c 4 workload_C.${NETWORK_NAME}
              docker exec workload_C ping -W 10 -c 4 workload_B.${NETWORK_NAME}
              docker rm -f workload_B
              docker rm -f workload_C
            assertOut:
              - contains:
                  $brooklyn:formatString:
                    - "--- workload_B.%s ping statistics ---\n4 packets transmitted, 4 received"
                    - $brooklyn:config("network.name")
              - contains:
                  $brooklyn:formatString:
                    - "--- workload_C.%s ping statistics ---\n4 packets transmitted, 4 received"
                    - $brooklyn:config("network.name")
            assertErr:
              isEmpty: true
        - type: ssh-test
          name: "TEST-6-4 Test different network connectivity failure"
          brooklyn.config:
            shell.env:
              NETWORK_NAME: $brooklyn:config("network.name")
            command: |
              echo "[TEST] Creating two containers on different networks"
              docker run -di --name workload_D --net ${NETWORK_NAME} cloudsoft/centos:7 /bin/bash
              docker run -di --name workload_E --net bridge -e affinity:container!=workload_D cloudsoft/centos:7 /bin/bash
              WORKLOAD_D_IP=$(docker inspect --format "{{.NetworkSettings.Networks.${NETWORK_NAME}.IPAddress}}" workload_D)
              docker exec workload_E ping -W 10 -c 4 workload_D.${NETWORK_NAME} || true
              docker exec workload_E ping -W 10 -c 4 ${WORKLOAD_D_IP} || true
              docker rm -f workload_D
              docker rm -f workload_E
            assertErr:
              contains:
                $brooklyn:formatString:
                  - "ping: unknown host workload_D.%s"
                  - $brooklyn:config("network.name")
            assertOut:
              contains: "ping statistics ---\n4 packets transmitted, 0 received"

  - id: test-swarm-etcd-tls
    item:
      type: ssh-test
      name: "TEST Swarm Etcd uses swarm"
      brooklyn.parameters:
        - name: ca.url
          description: URL of the CA server
      brooklyn.config:
        shell.env:
          DISCOVERY_URL: $brooklyn:entity("etcd-cluster").attributeWhenReady("etcd.authority")
          CERT_PATH:
            $brooklyn:formatString:
            - "%s/.certs"
            - $brooklyn:entity("swarm-manager").attributeWhenReady("install.dir")
        command: |
          set -e
          URL=${DISCOVERY_URL#etcd://}
          ! curl https://${URL}/version --fail
          ! curl http://${URL}/version --fail
          curl --cacert "${CERT_PATH}/ca.pem" \
            --cert "${CERT_PATH}/cert.pem" \
            --key "${CERT_PATH}/key.pem" \
            --fail \
            https://${URL}/version

##Â swarm tests to scale up by one
  - id: test-swarm-scale-up
    item:
      type: org.apache.brooklyn.test.framework.TestCase
      description: |
        Test Swarm can be scaled up

      brooklyn.children:
        - type: sensor-test
          name: "TEST-7-1 Initial Size of cluster is 2"
          targetId: docker-swarm-nodes
          sensor: group.members.count
          assert:
            equals: 2
        - type: ssh-test
          name: "TEST-7-2 Create load on server"
          brooklyn.config:
            command: |
              echo "[TEST] Creating load"
              docker run -di --name TEST_7_2_LOAD_1 -e affinity:container!=TEST_7_2_LOAD_2  cloudsoft/centos:7 /bin/bash
              docker run -di --name TEST_7_2_LOAD_2 -e affinity:container!=TEST_7_2_LOAD_1  cloudsoft/centos:7 /bin/bash

              docker exec -d TEST_7_2_LOAD_1 dd if=/dev/zero of=/dev/null
              docker exec -d TEST_7_2_LOAD_2 dd if=/dev/zero of=/dev/null
        - type: sensor-test
          name: "TEST-7-3 Final Size of cluster is 3"
          targetId: docker-swarm-nodes
          timeout: 20m
          sensor: group.members.count
          assert:
            equals: 3
        - type: ssh-test
          name: "TEST-7-4 Tear down load"
          brooklyn.config:
            command: |
              echo "[TEST] Removing load"

              docker rm -f TEST_7_2_LOAD_1
              docker rm -f TEST_7_2_LOAD_2

  - id: test-swarm-restart
    name: Restart Swarm member (node/manager)
    item:
      type: test-case
      brooklyn.children:
      - type: ssh-cmd-restart
      - type: assert-failed
      - type: assert-up
  - id: test-swarm-node-restart
    name: Restart all Swarm nodes
    item:
      type: test-case
      brooklyn.children:
      - type: loop-test-case
        brooklyn.config:
          targetId: docker-swarm-nodes
          test.spec:
            $brooklyn:entitySpec:
              type: test-swarm-restart
              name: Restart Swarm node
      - type: test-swarm-restart
        name: Restart Swarm Manager
        brooklyn.config:
          targetId: swarm-manager
      - type: ssh-test
        name: Assert Healthy Swarm
        brooklyn.config:
          targetId: swarm-client
          command:
            $brooklyn:formatString:
              - |
                NODE_CNT=$(docker info | grep "Nodes:")
                echo "${NODE_CNT}"
                [ "${NODE_CNT}" = "Nodes: %d" ]
              - $brooklyn:entity("docker-swarm-nodes").attributeWhenReady("group.members.count")


  - id: docker-swarm-tests
    name: Docker Swarm Tests
    description: |
      Tests on Docker Swarm over TLS
    itemType: entity
    item:
      type: org.apache.brooklyn.test.framework.TestCase

      brooklyn.config:
        swarm.initial.size: 2
        etcd.initial.size: 1
        swarm.max.size: 5
        swarm.scaling.cpu.limit: 0.95
        swarm.defaultnetwork: "brooklyn"

      brooklyn.children:

        # The swarm to test
        - type: docker-swarm
          id: swarm

        # A client for talking to the swarm
        - type: test-docker-client-with-tls
          name: Swarm client with TLS
          id: swarm-client
          brooklyn.config:
            customize.latch: $brooklyn:entity("swarm").attributeWhenReady("service.isUp")
            client.address: $brooklyn:attributeWhenReady("host.address")
            ca.url: $brooklyn:entity("ca-server").attributeWhenReady("main.uri")
            docker.url: $brooklyn:entity("swarm").attributeWhenReady("swarm.url")

        - type: org.apache.brooklyn.test.framework.TestCase
          name: Swarm TLS tests
          brooklyn.children:

          - type: assert-up
            name: "TEST-1 Assert up"
            brooklyn.config:
              targetId: swarm

          - type: assert-running
            name: "TEST-2 Assert running"
            brooklyn.config:
              targetId: swarm

          - type: test-connect-fails-without-tls
            name: "TEST-3 Test connect fails without TLS"
            brooklyn.config:
              targetId: swarm-client
              docker.url: $brooklyn:entity("swarm").attributeWhenReady("swarm.url")
              start.latch: $brooklyn:entity("swarm-client").attributeWhenReady("service.isUp")

          # Run the docker tests against the swarm
          - type: docker-engine-test
            name: "TEST-4 Test Swarm over TLS"
            brooklyn.config:
              targetId: swarm-client
              start.latch: $brooklyn:entity("swarm-client").attributeWhenReady("service.isUp")

          - type: test-docker-run-pulls
            name: "TEST-5 Test docker run pulls"
            brooklyn.config:
              targetId: swarm-manager
              swarm.url: $brooklyn:component("swarm").attributeWhenReady("swarm.url")
              install.dir: $brooklyn:component("swarm-manager").attributeWhenReady("install.dir")

          - type: test-swarm-networking
            name: "TEST-6 Test Swarm networking"
            brooklyn.config:
              targetId: swarm-client
              start.latch: $brooklyn:entity("swarm-client").attributeWhenReady("service.isUp")
              swarm.url: $brooklyn:component("swarm").attributeWhenReady("swarm.url")
              ca.url: $brooklyn:component("ca-server").attributeWhenReady("main.uri")
              client.address: $brooklyn:component("swarm-client").attributeWhenReady("host.address")
              network.name: $brooklyn:component("swarm").config("swarm.defaultnetwork")

          - type: test-swarm-scale-up
            name: "TEST-7 Test Swarm scale up"
            brooklyn.config:
              targetId: swarm-client
              start.latch: $brooklyn:entity("swarm-client").attributeWhenReady("service.isUp")

          - type: test-swarm-etcd-tls
            name: "TEST-8 Test Swarm Etcd TLS"
            brooklyn.config:
              targetId: swarm-manager

          - type: test-swarm-node-restart
            name: "TEST-9 Test Swarm node restart"
