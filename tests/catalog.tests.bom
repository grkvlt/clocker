brooklyn.catalog:
  version: 2.0.0-SNAPSHOT
  dependsOn: ["common.tests.bom"]
  iconUrl: https://raw.githubusercontent.com/docker-library/docs/c350af05d3fac7b5c3f6327ac82fe4d990d8729c/docker/logo.png
  license_code: TODO
  license_url: TODO
  items:

  ###
   # Tests that we can deploy a Docker Engine. We assert that it reports success, is reachable
   # and basic health checks (via Docker CLI) also report success.
   ##
  - id: docker-engine-test
    name: Docker Engine test
    description: Test that Docker Engine is deployed correctly
    item:

      brooklyn.parameters:
      - name: timeout.initialStartup
        description: The timeout for provisioning, installing and launching the app-under-test.
        type: org.apache.brooklyn.util.time.Duration
        default: 20m
      - name: timeout.runtimeAssertion
        type: org.apache.brooklyn.util.time.Duration
        description: The timeout for any other operation (e.g. invoking an effector or waiting for a sensor to be updated)
        default: 5m

      services:
      - type: docker-engine
        id: docker-engine
      - type: org.apache.brooklyn.test.framework.TestCase
        name: Tests
        brooklyn.config:
          targetId: docker-engine
          timeout: $brooklyn:scopeRoot().config("timeout.runtimeAssertion")
        brooklyn.children:
        - type: org.apache.brooklyn.test.framework.TestSensor
          name: TEST [service.state] IS [running]
          brooklyn.config:
            sensor: service.state
            assert:
            - matches: running
            timeout: $brooklyn:scopeRoot().config("timeout.initialStartup")
        - type: org.apache.brooklyn.test.framework.TestSensor
          name: TEST [service.isUp] IS [true]
          brooklyn.config:
            sensor: service.isUp
            assert:
            - equals: true
        - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
          name: TEST docker CLI commands succeed
          brooklyn.config:
            command: sudo docker ps
            assert.status:
              equals: 0
        # Test image pull and delete
        - type: org.apache.brooklyn.test.framework.TestCase
          name: TEST docker images
          brooklyn.children:
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker stock image
            brooklyn.parameters:
            - name: image.preinstall
              default: cloudsoft/centos:7
            brooklyn.config:
              # Should already be pulled by the docker-engine blueprint
              command: 
                $brooklyn:formatString:
                - sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep "%s"
                - $brooklyn:config("image.preinstall")
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: Remove pre-installed image
            brooklyn.parameters:
            - name: image.preinstall
              default: cloudsoft/centos:7
            brooklyn.config:
              # Should already be pulled by the docker-engine blueprint
              command: 
                $brooklyn:formatString:
                - sudo docker rmi "%s"
                - $brooklyn:config("image.preinstall")
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.TestEffector
            name: Restart to re-download image
            brooklyn.config:
              effector: restart
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker re-downloads stock images
            brooklyn.parameters:
            - name: image.preinstall
              default: cloudsoft/centos:7
            brooklyn.config:
              # Should already be pulled by the docker-engine blueprint
              command: 
                $brooklyn:formatString:
                - sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep "%s"
                - $brooklyn:config("image.preinstall")
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker pull
            brooklyn.config:
              command: sudo docker pull redis
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker images added
            brooklyn.config:
              command: sudo docker images
              assert.out:
                contains: redis
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker rmi
            brooklyn.config:
              command: sudo docker rmi redis
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker images removed
            brooklyn.config:
              command: echo `sudo docker images | grep -c redis`
              assert.out:
                equals: "0"
        # Test starting and stopping and restarting a container
        - type: org.apache.brooklyn.test.framework.TestCase
          name: TEST docker containers
          brooklyn.children:
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker run
            brooklyn.config:
              command: sudo docker run -d --name "test-MongoDB" mongo
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker ps
            brooklyn.config:
              command: sudo docker ps
              assert.out:
                contains: test-MongoDB
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker stop
            brooklyn.config:
              command: sudo docker stop test-MongoDB
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker ps
            brooklyn.config:
              command: echo `sudo docker ps | grep -c test-MongoDB`
              assert.out:
                equals: "0"
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker start
            brooklyn.config:
              command: sudo docker start test-MongoDB
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker ps
            brooklyn.config:
              command: sudo docker ps
              assert.out:
                contains: test-MongoDB

        # Test building form a dockerfile
        - type: org.apache.brooklyn.test.framework.TestCase
          name: TEST docker containers
          brooklyn.children:
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: Setup Dockerfile
            brooklyn.config:
              command: mkdir test_dockerfile_dir;  printf "FROM ubuntu\nRUN echo hello world" > test_dockerfile_dir/Dockerfile
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker build
            brooklyn.config:
              command: sudo docker build -t test_dockerfile:latest test_dockerfile_dir
              assert.status:
                equals: 0
          - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
            name: TEST docker images built
            brooklyn.config:
              command: sudo docker images
              assert.out:
                contains: test_dockerfile




  ###
   # Tests that we can deploy a Docker Engine along with a long-running container.
   # We assert that the container comes up (according to the CLI command `docker ps`).
   ##
  - id: docker-engine-and-container-test
    name: Docker Engine and Container test
    description: Test that can run a container on the Docker Engine
    item:

      brooklyn.parameters:
      - name: timeout.initialStartup
        description: The timeout for provisioning, installing and launching the app-under-test.
        type: org.apache.brooklyn.util.time.Duration
        default: 20m
      - name: timeout.runtimeAssertion
        type: org.apache.brooklyn.util.time.Duration
        description: The timeout for any other operation (e.g. invoking an effector or waiting for a sensor to be updated)
        default: 5m

      services:
      - type: docker-engine
        id: docker-engine-2
        brooklyn.children:
        - type: docker-engine-container
          container: clockercentral/centos

      - type: org.apache.brooklyn.test.framework.TestCase
        name: Tests
        brooklyn.config:
          targetId: docker-engine-2
          timeout: $brooklyn:scopeRoot().config("timeout.runtimeAssertion")
        brooklyn.children:
        - type: org.apache.brooklyn.test.framework.TestSensor
          name: TEST [service.isUp] IS [true]
          brooklyn.config:
            sensor: service.isUp
            timeout: $brooklyn:scopeRoot().config("timeout.initialStartup")
            assert:
            - equals: true
        - type: org.apache.brooklyn.test.framework.SimpleShellCommandTest
          name: TEST container running
          brooklyn.config:
            command: sudo docker ps
            assert.out:
              contains: clockercentral
